<?php

/**
 * ProcessWire simple Partial Renderer
 *
 * Renders partial templates in a "mvc framework" fashion
 *
 * TemplatePartialRenderer module for ProcessWire 2.4
 * Copyright (C) 2014 by Maks Feltrin - pine3ree
 *
 */

class TemplatePartialRenderer extends WireData implements Module
{
    public static function getModuleInfo()
    {
        return array(
            'title'    => 'Template Partial Renderer',
            'version'  => 101,
            'summary'  => 'Render a partial php template injecting variables through an array',
            'author'   => 'maks feltrin - pine3ree',
            'href'     => 'https://github.com/pine3ree/TemplatePartialRenderer',
            'singular' => true,
            'autoload' => function () {
                $page = wire('page');
                return !($page instanceof Page && $page->template == 'admin');
            },
        );
    }

    public function init()
    {
        $this->addHook('TemplateFile::renderPartial', $this, 'renderPartial');
        $this->addHook('Page::renderPartial', $this, 'renderPartial');
    }

    /**
     *
     * @param HookEvent $event
     * @return string|NULL
     * @throws WireException
     */
    public function renderPartial(HookEvent $event)
    {
        $event->return = null;

        $tmpl = $event->arguments(0);
        if (!is_string($tmpl)) {
            if ($this->config->debug) {
                throw new WireException('The template argument must be a string');
            }

            return;
        };

        $data = $event->arguments(1) ? $event->arguments(1) : array();

        if (!is_array($data)) {
            if ($this->config->debug) {
                throw new WireException(
                    'The second argument must be an array of variables to inject into the template or NULL'
                );
            }

            return;
        };

        $echo = (bool) $event->arguments(2);

        if (!$this->hasValidExtension($tmpl)) {
            $tmpl = $tmpl . '.php';
        }

        $file = $this->config->paths->templates . $tmpl;

        $event->return = $this->output($file, $data)->render();

        if ($echo) {
            echo $event->return . "\n";
            $event->return = null;
        }
    }

    protected function output($template, $data)
    {
		$output = new TemplateFile($template);

		foreach($data as $key => $value) {
            $output->set($key, $value);
        }

		$fuel = Wire::getFuel();
        $output->set('wire', $fuel);
		foreach($fuel as $key => $value) {
            $output->set($key, $value);
        }

		$output->set('page', $this->page);

		return $output;
	}

    protected function hasValidExtension($tmpl)
    {
        $end = substr($tmpl, -4);
        if (in_array($end, array('.php', '.tpl', '.inc'))) {
            return true;
        }

        $end = substr($tmpl, -6);
        if ($end === '.phtml') {
            return true;
        }

        return false;
    }

    public function ___install()
    {
        if (version_compare(PHP_VERSION, '5.3.8', '<')) {
            throw new WireException("This module requires PHP 5.3.8 or newer.");
        }

        $pwVersion = 100 * ProcessWire::versionMajor
            + 10 * ProcessWire::versionMinor
            + 1 * ProcessWire::versionRevision
        ;

        if ($pwVersion < 250) {
            throw new WireException("This module requires ProcessWire 2.5.0 or newer.");
        }
    }
}
